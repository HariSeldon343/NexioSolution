/*!
 * Nexio Core JavaScript Bundle
 * Optimized and minified version
 * Generated: 2025-08-10
 */

// Core Utilities
const NexioCore = (function() {
    'use strict';
    
    // CSRF Token Management
    const getCSRFToken = () => {
        const meta = document.querySelector('meta[name="csrf-token"]');
        return meta ? meta.getAttribute('content') : null;
    };
    
    // API Request Helper
    const apiRequest = async (url, options = {}) => {
        const defaultOptions = {
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': getCSRFToken(),
                'X-Requested-With': 'XMLHttpRequest'
            },
            credentials: 'same-origin'
        };
        
        const config = { ...defaultOptions, ...options };
        if (config.headers) {
            config.headers = { ...defaultOptions.headers, ...config.headers };
        }
        
        try {
            const response = await fetch(url, config);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return await response.json();
        } catch (error) {
            throw error;
        }
    };
    
    // Notification System
    const notify = (message, type = 'info', duration = 5000) => {
        const notification = document.createElement('div');
        notification.className = `alert alert-${type} alert-dismissible fade-in`;
        notification.style.cssText = 'position:fixed;top:20px;right:20px;z-index:9999;max-width:400px;';
        notification.innerHTML = `
            ${message}
            <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
        `;
        document.body.appendChild(notification);
        
        if (duration > 0) {
            setTimeout(() => notification.remove(), duration);
        }
        
        return notification;
    };
    
    // Debounce Function
    const debounce = (func, wait = 300) => {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    };
    
    // DOM Ready Handler
    const ready = (fn) => {
        if (document.readyState !== 'loading') {
            fn();
        } else {
            document.addEventListener('DOMContentLoaded', fn);
        }
    };
    
    // Element Query Selector Shortcuts
    const $ = (selector, context = document) => context.querySelector(selector);
    const $$ = (selector, context = document) => Array.from(context.querySelectorAll(selector));
    
    // Format File Size
    const formatFileSize = (bytes) => {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    };
    
    // Format Date
    const formatDate = (date, format = 'it-IT') => {
        return new Date(date).toLocaleDateString(format);
    };
    
    // Escape HTML
    const escapeHtml = (text) => {
        const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        return text.replace(/[&<>"']/g, m => map[m]);
    };
    
    // Loading State Manager
    const loading = {
        show: (element, text = 'Caricamento...') => {
            if (typeof element === 'string') {
                element = $(element);
            }
            if (!element) return;
            
            element.dataset.originalContent = element.innerHTML;
            element.innerHTML = `<span class="spinner"></span> ${text}`;
            element.disabled = true;
        },
        hide: (element) => {
            if (typeof element === 'string') {
                element = $(element);
            }
            if (!element || !element.dataset.originalContent) return;
            
            element.innerHTML = element.dataset.originalContent;
            delete element.dataset.originalContent;
            element.disabled = false;
        }
    };
    
    // Form Serialization
    const serializeForm = (form) => {
        const formData = new FormData(form);
        const object = {};
        formData.forEach((value, key) => {
            if (!object.hasOwnProperty(key)) {
                object[key] = value;
                return;
            }
            if (!Array.isArray(object[key])) {
                object[key] = [object[key]];
            }
            object[key].push(value);
        });
        return object;
    };
    
    // Storage Wrapper
    const storage = {
        get: (key) => {
            try {
                const item = localStorage.getItem(key);
                return item ? JSON.parse(item) : null;
            } catch (e) {
                return null;
            }
        },
        set: (key, value) => {
            try {
                localStorage.setItem(key, JSON.stringify(value));
                return true;
            } catch (e) {
                return false;
            }
        },
        remove: (key) => {
            localStorage.removeItem(key);
        },
        clear: () => {
            localStorage.clear();
        }
    };
    
    // Event Delegation Helper
    const delegate = (element, eventName, selector, handler) => {
        element.addEventListener(eventName, function(event) {
            const targetElement = event.target.closest(selector);
            if (targetElement && element.contains(targetElement)) {
                handler.call(targetElement, event);
            }
        });
    };
    
    // Confirm Dialog
    const confirm = async (message, title = 'Conferma') => {
        return new Promise((resolve) => {
            const modal = document.createElement('div');
            modal.className = 'modal fade show';
            modal.style.display = 'block';
            modal.innerHTML = `
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">${title}</h5>
                        </div>
                        <div class="modal-body">${message}</div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-action="cancel">Annulla</button>
                            <button type="button" class="btn btn-primary" data-action="confirm">Conferma</button>
                        </div>
                    </div>
                </div>
            `;
            
            const backdrop = document.createElement('div');
            backdrop.className = 'modal-backdrop fade show';
            
            document.body.appendChild(backdrop);
            document.body.appendChild(modal);
            document.body.classList.add('modal-open');
            
            const cleanup = () => {
                modal.remove();
                backdrop.remove();
                document.body.classList.remove('modal-open');
            };
            
            modal.addEventListener('click', (e) => {
                if (e.target.dataset.action === 'confirm') {
                    cleanup();
                    resolve(true);
                } else if (e.target.dataset.action === 'cancel') {
                    cleanup();
                    resolve(false);
                }
            });
        });
    };
    
    // Copy to Clipboard
    const copyToClipboard = async (text) => {
        try {
            await navigator.clipboard.writeText(text);
            notify('Copiato negli appunti', 'success', 2000);
            return true;
        } catch (err) {
            // Fallback
            const textarea = document.createElement('textarea');
            textarea.value = text;
            textarea.style.position = 'fixed';
            textarea.style.opacity = '0';
            document.body.appendChild(textarea);
            textarea.select();
            try {
                document.execCommand('copy');
                notify('Copiato negli appunti', 'success', 2000);
                return true;
            } catch (err) {
                notify('Errore durante la copia', 'danger');
                return false;
            } finally {
                document.body.removeChild(textarea);
            }
        }
    };
    
    // Throttle Function
    const throttle = (func, limit) => {
        let inThrottle;
        return function() {
            const args = arguments;
            const context = this;
            if (!inThrottle) {
                func.apply(context, args);
                inThrottle = true;
                setTimeout(() => inThrottle = false, limit);
            }
        };
    };
    
    // URL Parameter Helper
    const urlParams = {
        get: (name) => {
            const params = new URLSearchParams(window.location.search);
            return params.get(name);
        },
        set: (name, value) => {
            const params = new URLSearchParams(window.location.search);
            params.set(name, value);
            const newUrl = `${window.location.pathname}?${params.toString()}`;
            window.history.pushState({}, '', newUrl);
        },
        remove: (name) => {
            const params = new URLSearchParams(window.location.search);
            params.delete(name);
            const newUrl = `${window.location.pathname}?${params.toString()}`;
            window.history.pushState({}, '', newUrl);
        }
    };
    
    // Initialize Core Features
    const init = () => {
        // Auto-initialize CSRF tokens for all forms
        $$('form').forEach(form => {
            if (!form.querySelector('input[name="csrf_token"]')) {
                const token = getCSRFToken();
                if (token) {
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'csrf_token';
                    input.value = token;
                    form.appendChild(input);
                }
            }
        });
        
        // Auto-initialize tooltips if Bootstrap is available
        if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
            $$('[data-bs-toggle="tooltip"]').forEach(el => {
                new bootstrap.Tooltip(el);
            });
        }
        
        // Auto-initialize confirm dialogs
        delegate(document, 'click', '[data-confirm]', async function(e) {
            e.preventDefault();
            const message = this.dataset.confirm;
            if (await confirm(message)) {
                if (this.tagName === 'A') {
                    window.location.href = this.href;
                } else if (this.tagName === 'BUTTON' && this.form) {
                    this.form.submit();
                }
            }
        });
        
        // Auto-initialize copy buttons
        delegate(document, 'click', '[data-copy]', function(e) {
            e.preventDefault();
            const text = this.dataset.copy;
            copyToClipboard(text);
        });
    };
    
    // Public API
    return {
        init,
        ready,
        $,
        $$,
        apiRequest,
        notify,
        debounce,
        throttle,
        loading,
        storage,
        delegate,
        confirm,
        copyToClipboard,
        formatFileSize,
        formatDate,
        escapeHtml,
        serializeForm,
        urlParams,
        getCSRFToken
    };
})();

// Auto-initialize when DOM is ready
NexioCore.ready(() => NexioCore.init());

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = NexioCore;
}

// Make available globally
window.NexioCore = NexioCore;
window.Nexio = NexioCore; // Alias